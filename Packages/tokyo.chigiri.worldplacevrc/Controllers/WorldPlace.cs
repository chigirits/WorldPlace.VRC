using System;
using System.Collections.Generic;
using System.Reflection;
using Anatawa12.AnimatorControllerAsACode.Framework;
using Anatawa12.AnimatorControllerAsACode.VRCAvatars3;
using UnityEditor.Animations;
using UnityEngine;
using Object = UnityEngine.Object;

namespace tokyo.chigiri.worldplace.controllers
{

    public static class AcaacUtilities
    {

        // AccTransition

        public static AccTransition If(this AccTransition transition, params AccParameterCondition[] conditions)
        {
            foreach (var condition in conditions) transition.When(condition);
            return transition;
        }

        public static AccTransition Raw(this AccTransition transition, Action<AnimatorStateTransition> action)
        {
            var raw = transition.GetType()
                .GetField("Transition", BindingFlags.Instance | BindingFlags.NonPublic)
                .GetValue(transition) as AnimatorStateTransition;
            action.Invoke(raw);
            return transition;
        }

        // AccState

        public static AccState Sets<T>(this AccState state, AccParameter<T> parameter, T value) where T : unmanaged
        {
            state.SetAvatarParameter(parameter, value);
            return state;
        }

        public static AccState SetsLocal<T>(this AccState state, AccParameter<T> parameter, T value) where T : unmanaged
        {
            state.SetAvatarParameterLocally(parameter, value);
            return state;
        }

        public static AccState Raw(this AccState state, Action<AnimatorState> action)
        {
            var raw = state.GetType()
                .GetField("State", BindingFlags.Instance | BindingFlags.NonPublic)
                .GetValue(state) as AnimatorState;
            action.Invoke(raw);
            return state;
        }

        // AccParameter

        public static AccParameter<T> Raw<T>(this AccParameter<T> parameter, Action<AnimatorControllerParameter> action) where T : unmanaged
        {
            var raw = parameter.GetType()
                .GetField("_parameter", BindingFlags.Instance | BindingFlags.NonPublic)
                .GetValue(parameter) as AnimatorControllerParameter;
            action.Invoke(raw);
            return parameter;
        }

    }

    public class WorldPlace : GeneratorLayerBase
    {

        public Motion localFalseMotion;
        public Motion localTrueMotion;
        public Motion orientationMotion;
        public Motion orientationResetMotion;
        public Motion followingPBMotion;
        public Motion repositionMotion;
        public Motion fixedMotion;
        public Motion presetB1Motion;

        const string WARNING_MESSAGE = "!! DO NOT EDIT (generated by AnimatorControllerAsACode)";

        protected override IEnumerable<Object> WatchingObjects => Array.Empty<Object>();

        protected override void Generate(Acc acc)
        {
            CreateTrigger(acc);
            CreatePosition(acc);
            CreateOrientation(acc);
            CreateLocal(acc);
        }

        private void CreateTrigger(Acc acc)
        {
            var layer = acc.AddLayer("Trigger");
            var triggerParam = layer.BoolParameter("PMC/WorldPlace/API/_Trigger");
            var repositionParam = layer.BoolParameter("PMC/WorldPlace/Reposition");

            var idleState = layer.NewState("Idle");
            var onState = layer.NewState("On")
                .SetsLocal(repositionParam, true);
            var offState = layer.NewState("Off")
                .SetsLocal(repositionParam, false);

            idleState.TransitionsTo(onState)
                .If(triggerParam.IsTrue());
            onState.TransitionsTo(offState)
                .If(triggerParam.IsFalse());
            offState.TransitionsToExit()
                .Raw(t => t.hasExitTime = true);

            layer.NewState(WARNING_MESSAGE).Over(idleState);
        }

        private void CreatePosition(Acc acc)
        {
            var layer = acc.AddLayer("Position");
            var repositionParam = layer.BoolParameter("PMC/WorldPlace/Reposition");
            var presetB1Param = layer.BoolParameter("PMC/WorldPlace/Preset/B1");

            var followingPBState = layer.NewState("FollowingPB").WithAnimation(followingPBMotion);
            var repositionState = layer.NewState("Reposition").WithAnimation(repositionMotion);
            var fixedState = layer.NewState("Fixed").WithAnimation(fixedMotion);
            var presetB1State = layer.NewState("PresetB1").RightOf(repositionState).WithAnimation(presetB1Motion);

            followingPBState.TransitionsTo(repositionState)
                .If(repositionParam.IsTrue());
            repositionState.TransitionsTo(fixedState)
                .If(repositionParam.IsFalse());
            fixedState.TransitionsTo(repositionState)
                .If(repositionParam.IsTrue());

            followingPBState.TransitionsTo(presetB1State)
                .If(presetB1Param.IsTrue());
            repositionState.TransitionsTo(presetB1State)
                .If(presetB1Param.IsTrue());
            fixedState.TransitionsTo(presetB1State)
                .If(presetB1Param.IsTrue());

            presetB1State.TransitionsTo(repositionState)
                .If(presetB1Param.IsFalse(), repositionParam.IsTrue());
            presetB1State.TransitionsTo(fixedState)
                .If(presetB1Param.IsFalse(), repositionParam.IsFalse());

            layer.NewState(WARNING_MESSAGE).Over(followingPBState);
        }

        private void CreateOrientation(Acc acc)
        {
            var layer = acc.AddLayer("Orientation");
            var orientationParam = layer.FloatParameter("PMC/WorldPlace/Orientation");
            var presetB1Param = layer.BoolParameter("PMC/WorldPlace/Preset/B1");

            var variableState = layer.NewState("Variable")
                .WithAnimation(orientationMotion)
                .MotionTime(orientationParam);
            var constantState = layer.NewState("Constant")
                .WithAnimation(orientationResetMotion);

            variableState.TransitionsTo(constantState)
                .If(presetB1Param.IsTrue());
            constantState.TransitionsToExit()
                .If(presetB1Param.IsFalse());

            layer.NewState(WARNING_MESSAGE).Over(variableState);
        }

        private void CreateLocal(Acc acc)
        {
            var layer = acc.AddLayer("Local");
            var unlocalParam = layer.BoolParameter("PMC/Common/API/_Unlocal");
            var isLocalParam = layer.BoolParameter("IsLocal");
            var falseState = layer.NewState("False").WithAnimation(localFalseMotion);
            var trueState = layer.NewState("True").WithAnimation(localTrueMotion);
            falseState.TransitionsTo(trueState)
                .If(isLocalParam.IsTrue(), unlocalParam.IsFalse());
            trueState.TransitionsToExit()
                .If(isLocalParam.IsFalse());
            trueState.TransitionsToExit()
                .If(unlocalParam.IsTrue());

            layer.NewState(WARNING_MESSAGE).Over(falseState);
        }

    }

}
